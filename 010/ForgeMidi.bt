#include "common.bt"

LittleEndian();

// Forge MIDI
typedef enum <uchar> {
    NOTE_OFF = 0x8,
    NOTE_ON  = 0x9,
    POLY_PRS = 0xA,
    CTRL_CHG = 0xB,
    PRGM_CHG = 0xC,
    CHAN_PRS = 0xD,
    PITCH_BD = 0xE
} msg_type;

typedef struct {
    char channel : 4;
    msg_type type : 4;
} msg_type_chan;

typedef int tick_t<read=tick_t_read>;
string tick_t_read(tick_t tick){
    string result;
    SPrintf(result, "%d:%d", tick / 480, tick % 480);
    return result;
}

typedef struct {
    char note;
    char velocity;
} M_NOTE_ON;

typedef struct {
    char note;
    char velocity;
} M_NOTE_OFF;

typedef struct {
    char unk[2];
} M_POLY_PRS;

typedef struct {
    char controller;
    char amt;
} M_CTRL_CHG;

typedef struct {
    char unk[2];
} M_PRGM_CHG;

typedef struct {
    char unk[2];
} M_CHAN_PRS;
typedef struct {
    char lsb;
    char msb;
} M_PITCH_BD;

typedef unsigned char int24[3]<read=int24_read>;
string int24_read(int24 v)
{
    int val = ((int)v[0] << 16) | ((int)v[2] << 8) | v[1];
    string ret;
    SPrintf(ret, "%d", val);
    return ret;
}

typedef struct {
    tick_t tick;
    char kind;
    if(kind == 1){
        msg_type_chan tc;
        if(tc.type > 9){
            Printf("0x%X: Type %d\n", FTell(), tc.type);
        }
        switch(tc.type){
            case NOTE_OFF:
                M_NOTE_OFF msg;
                break;
            case NOTE_ON:
                M_NOTE_ON msg;
                break;
            case POLY_PRS:
                M_POLY_PRS msg;
                break;
            case CTRL_CHG:
                M_CTRL_CHG msg;
                break;
            case PRGM_CHG:
                M_PRGM_CHG msg;
                break;
            case CHAN_PRS:
                M_CHAN_PRS msg;
                break;
            case PITCH_BD:
                M_PITCH_BD msg;
                break;
        }
    }
    else if(kind == 2) {
		// weird: MSB first, then remaining bytes in LE
        int24 tempo;
    }
    else if(kind == 4) {
        char num;
        char denom;
        char unused;
    }
    else if(kind == 8) {
        // I think this is 1 -> text event, 3 -> track name, 5 -> lyric
        char string_type;
        int16 string_offset;
    }
    else {
        local string tmp;
        SPrintf(tmp, "Unknown kind %d", kind);
        Assert(false, tmp);
    }
} midi_message<optimize=false>;

typedef struct {
    uint tick;
    PSTR lyric;
} LYRIC<read=LYRIC_READ,optimize=false>;
string LYRIC_READ(LYRIC& l){
    return PSTR_READ(l.lyric);
}

typedef struct {
    PSTR track_name;
    int num_events;
    if(num_events > 0)
        LYRIC lyrics[num_events];
    int unknown;
    int unknown_2;
    char unk;
} LYRICS<read=LYRICS_READ,optimize=false>;
string LYRICS_READ(LYRICS& t){
    string ret;
    SPrintf(ret, "%s (%d, %d, %d)", PSTR_READ(t.track_name), t.unknown, t.unknown_2, t.unk);
    return ret;
}

typedef struct {
    int num_fills_1;
    if(num_fills_1 > 0)
        struct {
            tick_t tick;
            int unk;
        } fills_1[num_fills_1];
    int num_fills_2;
    if(num_fills_2 > 0)
        struct {
            tick_t fill_start_tick;
            tick_t fill_end_tick;
            char is_BRE;
        } fill_start_stop[num_fills_2];
} DRUMFILL;

typedef struct {
    PSTR track_name;
    int unk;
    int unk;
    int num_events;
    struct {
        float time;
        tick_t ticks;
        ushort Length_millis;
        ushort Length_ticks;
        // Stores each key down as (1 << (MIDI_NOTE - 48))
        int key_bitfield<read=READ_KEY_POS>;
        int unk2;
        short unk3;
    } events[num_events];
    int unk;
} ANIM;
string READ_KEY_POS(int k)
{
    int bit = (int)(Log(k)/Log(2.0));
    string ret;
    SPrintf(ret, "%d", bit);
    return ret;
}

typedef struct {
    int num_pro_markers;
    struct {
        tick_t tick;
        struct {
            int unk : 1;
            int unk2: 1;
            int PRO_YELLOW : 1;
            int PRO_BLUE : 1;
            int PRO_GREEN : 1;
        } flags;
    } markers[num_pro_markers];
    int unk;
    int unk;
} CYMBALMARKER;

typedef struct {
    int difficulties;
    if(difficulties > 0){
        struct {
            int32 num_markers;
            if(num_markers > 0){
                struct{
                    tick_t StartTick;
                    tick_t EndTick;
                    struct {
                        int Glissando : 1;
                        int Trill : 1;
                        int Roll_1Lane : 1;
                        int Roll_2Lane : 1;
                        int Unk : 28;
                    } flags;
                } markers[num_markers];
            }
        } data2[difficulties]<optimize=false>;
    }    
} LANEMARKER;

typedef struct {
    int difficulties;
    if(difficulties > 0)
        struct{
            int count;
            struct {
                tick_t Start;
                tick_t End;
                int LowFret;
                int HighFret;
            } trills[count];
        } difficulty[difficulties]<optimize=false>;
} GTRTRILLS;

typedef struct {
    int num_difficulties;
    struct {
        int num_mixes;
        if(num_mixes)
            LYRIC mix[num_mixes];
    } drum_mixes[num_difficulties]<optimize=false>;
} DRUMMIX;

typedef struct {
    float start_millis;
    tick_t start_ticks;
    short length_millis;
    short length_ticks;
    struct {
        int lane_1 : 1;
        int lane_2 : 1;
        int lane_3 : 1;
        int lane_4 : 1;
        int lane_5 : 1;
        int additional_real_keys_lanes : 27;
    } lanes ;
    char is_hopo;
    Assert(is_hopo == 0 || is_hopo == 1);
    char no_tail;
    Assert(no_tail == 0 || no_tail == 1);
    int unknown;
// Probably more flags for rbmid_pc
//    Assert(unknown == 0 || unknown == 1);
} GEM<read=GEM_read>;
string GEM_read(GEM& gem){
    string ret;
    SPrintf(ret, "%f", gem.start_millis/1000);
    return ret;
}
typedef struct {
    int num_difficulties;
    struct {
        int unknown_aa;
        int num_events;
        if(num_events)
            GEM gem[num_events];
    } difficulty[num_difficulties]<optimize=false>;
    int end;
} GEMTRACK;

typedef struct {
    int num_difficulties;
    struct {
        int num_section_types;
        // 1st element: Overdrive sections
        // 2nd element: Solo sections
        struct {
            int num_sections;
            struct { 
                tick_t start_ticks;
                tick_t duration_ticks; 
            } sections[num_sections]<optimize=false>;
        } section_types[num_section_types]<optimize=false>;
    } difficulties[num_difficulties]<optimize=false>;
} OVERDRIVE;

typedef struct {
    float start_ms;
    float length;
    tick_t start_tick;
    tick_t length_ticks;
    int unk_start_note;
    int unk_end_note;
    char is_phrase;
    char is_overdrive;
    char unused[9]<hidden=true>;
    float LowNote;
    float HighNote;
    char UnknownCount;
    char UnknownFlag;
    char unused2[8]<hidden=true>;
} PHRASE;

typedef struct {
    int num_phrase_markers;
    PHRASE phrase_markers[num_phrase_markers];
    int num_phrase_markers_2;
    PHRASE phrase_markers_2[num_phrase_markers_2];
    int num_notes;
    struct {
        int type;
        int midi_note_start;
        int midi_note_end; // same as start unless portamento
        float start_ms;
        tick_t start;
        float length;
        ushort length_ticks;
        PSTR lyric; // empty string on portamento, symbols always stripped
        char IsLastNoteInPhrase;
        char UnkZero;
        char Unpitched;
        char UnkZero;
        char UnkFlag;  // always 0?
        char Unknown;  // Not a flag?
        char IsPortamento;
        char UnkFlag; // always 0?
        char UnkFlag; // always 1?
    } vocal_notes[num_notes]<optimize=false>;
    int num_percussions;
    tick_t percussions[num_percussions];
    int num_tacets;
    struct {
        float StartMillis;
        float EndMillis;
    }tacets[num_tacets];
} VOCALTRACK;

typedef struct {
    int num_maps;
    struct {
        float StartTime;
        int map;
    } hand_maps[num_maps];
} HANDMAP;

typedef struct {
    int num_hand_positions;
    struct {
        float StartTime;
        float Length;
        int position;
        char unk;
    } hand_pos_events[num_hand_positions];
} HANDPOS;

typedef struct {
    int count;
    struct {
        float Time;
        int Map;
    } maps[count]<optimize=false>;
} STRUMMAP<read=STRUMMAP_read>;
string STRUMMAP_read(STRUMMAP& u)
{
    string ret;
    SPrintf(ret, "%d", u.count);
    return ret;
}

// Used during guitar solos. Maybe for freestyle?
typedef struct {
    tick_t start;
    tick_t end;
    // Seem to be notes from MIDI 0-11, and then 12-23
    // This is the offset to those notes
    int note_offset;
} MARKUP_SOLO_NOTES;

typedef struct {
    tick_t start;
    tick_t end;
} TWOTICKS;

// Notes are taken relative to C, mod 12. So 0 => C, 2 => D, etc.
typedef struct {
    tick_t start;
    tick_t end;
    int notes_in_chord;
    Assert(notes_in_chord <= 12, "Only 12 notes in an octave");
    int notes[notes_in_chord];
} MARKUP_CHORD;

typedef struct {
    char unk;
    int unk2;
    int num_events;
    midi_message events[num_events];
    int num_strs;
    PSTR strings[num_strs]<optimize=false>;
} MIDITRACK;

typedef int tempo_t<read=tempo_t_read>;
string tempo_t_read(tempo_t tempo){
    string result;
    SPrintf(result, "%f", 60000000.0 / tempo);
    return result;
}
typedef struct {
    float time;
    tick_t tick;
    tempo_t tempo;
} TEMPO;

typedef struct {
    int measure;
    tick_t tick;
    int16 numerator;
    int16 denominator;
} TIMESIG<read=TIMESIG_read>;
string TIMESIG_read(TIMESIG& t){
    string ret;
    SPrintf(ret, "%s : %d/%d, %d", tick_t_read(t.tick), t.numerator, t.denominator, t.measure);
    return ret;
}

typedef struct {
    tick_t tick;
    int is_downbeat;
} BEAT;
// File starts here!

typedef struct {
    int num_beatmatch_sections;
    struct { 
        int unk_zero;
        PSTR beatmatch_section;
        tick_t unk;
        tick_t unk;
    } beatmatch_section[num_beatmatch_sections]<optimize=false>;
    int unk_vrevent_count;
    struct {
        int unk;
        float unk;
        float unk;
        tick_t unk;
        tick_t unk;
        int unk;
    } unk_struct[unk_vrevent_count];
    int unk_vrevent_count2;
    struct {
        int unk;
        PSTR name;
        tick_t when;
    } unk_struct2[unk_vrevent_count2]<optimize=false>;
    int unk_vrevent_count3;
    struct {
        int unk;
        PSTR exsandohs;
        tick_t tick_1;
        tick_t tick_2;
        char flags[7];
        int neg_one;
    } unk_struct3[unk_vrevent_count3]<optimize=false>;
    int unk_vrevent_count4;
    struct {
        int unk;
        PSTR name;
        tick_t StartTick;
        tick_t EndTick;
    } unk_struct4[unk_vrevent_count4]<optimize=false>;
    int unk_vrevent_count5;
    struct {
        int unk;
        PSTR name;
        int num_exsohs;
        PSTR exsohs[num_exsohs]<optimize=false>;
        tick_t tick_1;
        tick_t tick_2;
        char unk;
    } unk_struct5[unk_vrevent_count5]<optimize=false>;
    int unk_vrevent_count5;
    tick_t unk_tick[unk_vrevent_count5];
    int unk_zero;
    int unk_vrevent_count6;
    struct {
        tick_t tick;
        int unk;
    } unk_struct6[unk_vrevent_count6];
} RBVREVENTS;

int format;
if(format == 0x10 || format == 0x2f){ // rbmid_ps4/pc
    int num_lyric_tracks;
    LYRICS lyrics[num_lyric_tracks] <optimize=false>;
    int num_fill_tracks;
    Assert(num_fill_tracks == num_lyric_tracks);
    DRUMFILL drum_fills[num_fill_tracks] <optimize=false>;
    int num_anim_tracks;
    ANIM anims[num_anim_tracks] <optimize=false>;
    int num_marker_tracks;
    Assert(num_marker_tracks == num_lyric_tracks);
    CYMBALMARKER pro_markers[num_marker_tracks] <optimize=false>;
    int num_lane_markers;
    Assert(num_lane_markers == num_lyric_tracks);
    LANEMARKER lane_markers[num_lane_markers] <optimize=false>;
    int num_gtr_trills;
    Assert(num_gtr_trills == num_lyric_tracks);
    GTRTRILLS gtr_trills[num_gtr_trills] <optimize=false>;
    int num_drum_mixes;
    Assert(num_drum_mixes == num_lyric_tracks);
    DRUMMIX drum_mixes[num_drum_mixes] <optimize=false>;
    int num_gem_tracks;
    Assert(num_gem_tracks == num_lyric_tracks);
    GEMTRACK gems[num_gem_tracks] <optimize=false>;
    int num_sections;
    Assert(num_sections == num_lyric_tracks);
    OVERDRIVE overdrive_solo_sections[num_sections] <optimize=false>;
    int num_vocal_tracks;
    VOCALTRACK vocal_tracks[num_vocal_tracks]<optimize=false>;
    int UnknownOne;
    int UnknownNegOne;
    float UnknownHundred;
    int num_unk_structs;
    struct {
        tick_t unk_tick;
        float unk_float;
    } unk_structs[num_unk_structs];
    int num_vocaltrack_ranges;
    struct {
        float StartMillis;
        tick_t StartTicks;
        float LowNote;
        float HighNote;
    } VocalTrackRange[num_vocaltrack_ranges];
    int what;
    int num_tracks_repeat;
    Assert(num_tracks_repeat == num_lyric_tracks);
    tick_t FinalTick;
    if(format == 0x2f){
        tick_t UnknownTick;
    }
    char what;
    float preview_start_ms;
    float preview_end_ms;
    Assert(preview_end_ms > preview_start_ms, "preview_end_ms > preview_start_ms");
    int num_guitar_handmap_tracks;
    Assert(num_guitar_handmap_tracks == num_lyric_tracks);
    HANDMAP guitar_handmap_tracks[num_guitar_handmap_tracks]<optimize=false>;
    int num_left_hand_tracks;
    Assert(num_left_hand_tracks == num_lyric_tracks);
    HANDPOS left_hand_tracks[num_left_hand_tracks]<optimize=false>;
    int num_strummap_tracks;
    Assert(num_strummap_tracks == num_lyric_tracks);
    STRUMMAP strum_maps[num_strummap_tracks]<optimize=false>;

    // =============================================
    // Begin confusing section

    int num_markup_solo_notes;
    MARKUP_SOLO_NOTES markup_notes_midi0[num_markup_solo_notes];
    int num_twoticks_1;
    TWOTICKS twoticks_1[num_twoticks_1];
    // this outer struct is just to collapse the array down into one item
    // because apparently 010 editor can only do that on optimized arrays
    struct {
        int num_markup_chords_1;
        MARKUP_CHORD markup_chords[num_markup_chords_1]<optimize=false>;
    } markup_chords_1;
    int num_solo_notes_2;
    MARKUP_SOLO_NOTES markup_notes[num_solo_notes_2];
    int num_solo_notes_3;
    MARKUP_SOLO_NOTES markup_notes_midi12[num_solo_notes_3];
    int num_twotick_2;
    TWOTICKS twoticks_2[num_twotick_2];

    // End confusing section
    // =============================================

    if(format == 0x2f) { // RBVR Specific section
        RBVREVENTS vr_events;
    }
    int two;
    Assert(two == 2, "This has always been 2");
    tick_t LastMarkupEventTick;
    int num_midi_tracks;
    MIDITRACK tracks[num_midi_tracks]<optimize=false>;
    tick_t SomeLastTick;
    uint NumMeasures;
    uint unknown[6];
    tick_t SomeLastTickMinus1;
    float unk_floats[4];
    int num_tempos;
    TEMPO tempos[num_tempos];
    int num_time_sigs;
    TIMESIG time_signatures[num_time_sigs];
    int num_beats;
    BEAT beats[num_beats];
    int unk_zero;
    int num_midi_track_names;
    PSTR midi_track_names[num_midi_track_names]<optimize=false>;

    // File End
}
else if(format == 0x2){ // mid_ps4/pc
    tick_t LastMarkupEventTick;
    int num_midi_tracks;
    MIDITRACK tracks[num_midi_tracks]<optimize=false>;
    tick_t SomeLastTick;
    uint NumMeasures;
    uint unknown[6];
    tick_t SomeLastTickMinus1;
    float unk_floats[4];
    int num_tempos;
    TEMPO tempos[num_tempos];
    int num_time_sigs;
    TIMESIG time_signatures[num_time_sigs];
    int num_beats;
    BEAT beats[num_beats];
    int unk_zero;
    int num_midi_track_names;
    PSTR midi_track_names[num_midi_track_names]<optimize=false>;
}